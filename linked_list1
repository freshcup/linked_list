class LinkedListNode
  attr_accessor :value, :next_node

  def initialize(value, next_node=nil)
    @value = value
    @next_node = next_node
  end
end



class Stack
	attr_reader :head
    
    def initialize
        @head = nil
    end

    # Push a value onto the stack
    def push(value)
    	@head = LinkedListNode.new(value, @head)
    end

 
    def pop
      if head
        print "#{@head.value} --> "
        @head = @head.next_node
      else
        print "nil\n"
      end
    end
end

def reverse_list(list)
  mystack = Stack.new
  while list
    mystack.push(list.value)
    list = list.next_node
  end
  mystack.head
end


def print_values(list_node)
  if list_node
    print "#{list_node.value} --> "
    print_values(list_node.next_node)
  else
    print "nil\n"
    return
  end
end

node1 = LinkedListNode.new(37)
node2 = LinkedListNode.new(99, node1)
node3 = LinkedListNode.new(12, node2)

print_values(node3)

puts "-------"

revlist = reverse_list(node3)

print_values(revlist)
